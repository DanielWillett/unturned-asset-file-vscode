{
    "$schema": "https://json-schema.org/draft-07/schema",
    "$id": "https://github.com/DanielWillett/unturned-asset-file-vscode/tree/master/Asset%20Spec/Asset%20Spec%20Schema.json",
    "title": "Asset Property Specification",
    "description": "Defines what properties are available in asset files.",
    "type": "object",
    "$defs": {
        "datPropertyType": {
            "anyOf": [
                {
                    "type": [ "string", "object" ]
                },
                {
                    "const": "Flag",
                    "title": "A flag which does not have a value."
                },
                {
                    "const": "UInt8",
                    "title": "An integer from 0 to 255 inclusive."
                },
                {
                    "const": "UInt16",
                    "title": "An integer from 0 to 65535 inclusive."
                },
                {
                    "const": "UInt32",
                    "title": "An integer from 0 to 4294967295 inclusive."
                },
                {
                    "const": "UInt64",
                    "title": "An integer from 0 to 18446744073709551615 inclusive."
                },
                {
                    "const": "Int8",
                    "title": "An integer from -128 to 127 inclusive."
                },
                {
                    "const": "Int16",
                    "title": "An integer from -32768 to 32767 inclusive."
                },
                {
                    "const": "Int32",
                    "title": "An integer from -2147483648 to 2147483647 inclusive."
                },
                {
                    "const": "Int64",
                    "title": "An integer from -9223372036854775808 to 9223372036854775807 inclusive."
                },
                {
                    "const": "String",
                    "title": "Zero or more characters of UTF-16 text."
                },
                {
                    "const": "RichTextString",
                    "title": "Zero or more characters of UTF-16 text with rich-text tags supported."
                },
                {
                    "const": "Float32",
                    "title": "Single-precision floating point decimal."
                },
                {
                    "const": "Float64",
                    "title": "Double-precision floating point decimal."
                },
                {
                    "const": "Float128",
                    "title": "Quadruple-precision floating point decimal."
                },
                {
                    "const": "Boolean",
                    "title": "True or false value."
                },
                {
                    "const": "Character",
                    "title": "A single UTF-16 character."
                },
                {
                    "const": "Type",
                    "title": "A type that exists in the base game."
                },
                {
                    "const": "Guid",
                    "title": "A Globally Unique Identifier (also called a UUID)."
                },
                {
                    "const": "AssetReference",
                    "title": "A Globally Unique Identifier (also called a UUID)."
                },
                {
                    "const": "ContentReference",
                    "title": "A reference to a Unity object in the specified masterbundle. Exact same as MasterBundleReference."
                },
                {
                    "const": "MasterBundleReference",
                    "title": "A reference to a Unity object in the specified masterbundle. Exact same as ContentReference."
                },
                {
                    "const": "FaceIndex",
                    "title": "An index of a built-in face texture."
                },
                {
                    "const": "BeardIndex",
                    "title": "An index of a built-in beard texture."
                },
                {
                    "const": "HairIndex",
                    "title": "An index of a built-in hair texture."
                },
                {
                    "const": "LegacyRewardList",
                    "title": "A list of rewards following the layout of 'SDG.Unturned.INPCReward, Assembly-CSharp'."
                },
                {
                    "const": "LegacyConditionList",
                    "title": "A list of conditions following the layout of 'SDG.Unturned.INPCCondition, Assembly-CSharp'."
                },
                {
                    "const": "GuidOrId",
                    "title": "An asset GUID or short ID, where ElementType is the category or asset type."
                },
                {
                    "const": "Id",
                    "title": "A short ID, where ElementType is the category."
                },
                {
                    "const": "DateTime",
                    "title": "A UTC date and time."
                },
                {
                    "const": "Position",
                    "title": "A Vector3 position (X, Y, Z) or object."
                },
                {
                    "const": "PositionOrLegacy",
                    "title": "A Vector3 position (X, Y, Z), object, or Key_X, Key_Y, Key_Z properties."
                },
                {
                    "const": "LegacyPosition",
                    "title": "A Vector3 position Key_X, Key_Y, Key_Z properties."
                },
                {
                    "const": "Scale",
                    "title": "A Vector3 scale (X, Y, Z) or object."
                },
                {
                    "const": "ScaleOrLegacy",
                    "title": "A Vector3 scale (X, Y, Z), object, or Key_X, Key_Y, Key_Z properties."
                },
                {
                    "const": "LegacyScale",
                    "title": "A Vector3 scale Key_X, Key_Y, Key_Z properties."
                },
                {
                    "const": "EulerRotation",
                    "title": "A Vector3 euler rotation (X, Y, Z) or object."
                },
                {
                    "const": "EulerRotationOrLegacy",
                    "title": "A Vector3 euler rotation (X, Y, Z), object, or Key_X, Key_Y, Key_Z properties."
                },
                {
                    "const": "LegacyEulerRotation",
                    "title": "A Vector3 euler rotation Key_X, Key_Y, Key_Z properties."
                },
                {
                    "const": "List",
                    "title": "A list of values."
                },
                {
                    "const": "Dictionary",
                    "title": "A dictionary of values."
                },
                {
                    "const": "MasterBundleName",
                    "title": "The name of a .masterbundle file."
                },
                {
                    "const": "LegacyBundleName",
                    "title": "The name of a .unity3d file."
                },
                {
                    "const": "AssetBundleVersion",
                    "title": "The version of an asset bundle or master bundle."
                }
            ]
        },
        "datProperty": {
            "type": "object",
            "properties": {
                "Key": {
                    "description": "The key of the flag or property.",
                    "type": "string"
                },
                "SingleKeyOverride": {
                    "type": [ "string", "null" ],
                    "description": "If 'KeyIsRegex', the singular version of the key which would not be regex (ex. Blade for Blade_#)."
                },
                "KeyIsRegex": {
                    "type": "boolean",
                    "description": "If 'Key' is a regex expression to match properties."
                },
                "KeyGroups": {
                    "type": [ "array", "null" ],
                    "description": "If 'KeyIsRegex', then this is a list of groups by name to match with other properties within the given regex group.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "RegexGroup": {
                                "type": "number",
                                "description": "The regex group (starting from 1) that acts as the identifier for this group."
                            },
                            "Name": {
                                "type": "string",
                                "description": "Unique name of this group (amongst the this asset type's hierarchy)."
                            }
                        }
                    }
                },
                "CountForRegexGroup": {
                    "type": [ "string", "null" ],
                    "description": "The regex-group for which this property is a count for."
                },
                "Aliases": {
                    "description": "Other keys that can be used for the flag or property.",
                    "type": "array",
                    "items": { "type": "string" }
                },
                "Type": {
                    "description": "The type of the property.",
                    "$ref": "#/$defs/datPropertyType"
                },
                "ElementType": {
                    "description": "The type of the elements of a List.",
                    "$ref": "#/$defs/datPropertyType"
                },
                "SpecialTypes": {
                    "description": "A special subset of element type, such as barricade or useable type.",
                    "type": "array",
                    "items": {
                        "type": [ "string", "number", "null" ]
                    }
                },
                "Required": {
                    "description": "If this property is required.",
                    "type": [ "string", "boolean" ]
                },
                "CanBeInMetadata": {
                    "description": "If this property can be read from the Metadata section.",
                    "type": "boolean"
                },
                "DefaultValue": {
                    "description": "The default value for this property if applicable. If IncludedDefaultValue is used, this indicates the default value if the property is not included."
                },
                "IncludedDefaultValue": {
                    "description": "The default value for this property if applicable. Indicates the default value if the property is included but not parsed correctly."
                },
                "Description": {
                    "description": "Short description of the property.",
                    "type": "string"
                },
                "Variable": {
                    "description": "Name of the variable in the C# class.",
                    "type": "string"
                },
                "Docs": {
                    "description": "Link to the Unturned modding docs when a page is available.",
                    "type": [ "string", "null" ],
                    "format": "uri"
                },
                "Markdown": {
                    "description": "Longer markdown description of the property.",
                    "type": [ "string", "null" ]
                },
                "Minimum": {
                    "type": [ "number", "string", "null" ],
                    "description": "Inclusive minimum value of the property. Can also be another property."
                },
                "Maximum": {
                    "type": [ "number", "string", "null" ],
                    "description": "Inclusive maximum value of the property. Can also be another property."
                },
                "MinimumExclusive": {
                    "type": [ "number", "string", "null" ],
                    "description": "Exclusive minimum value of the property. Can also be another property."
                },
                "MaximumExclusive": {
                    "type": [ "number", "string", "null" ],
                    "description": "Exclusive maximum value of the property. Can also be another property."
                },
                "Except": {
                    "type": "array",
                    "items": {
                        "type": [ "number", "string" ]
                    },
                    "description": "Exceptions to the minimum/maximum range."
                },
                "ExclusiveWith": {
                    "type": "array",
                    "items": {
                        "type": [ "number", "string" ]
                    },
                    "description": "List of properties that should not co-exist with this property."
                },
                "Deprecated": {
                    "type": "boolean",
                    "description": "If this property shouldn't be used anymore or was left in for legacy features."
                }
            },
            "required": [ "Key", "Type" ]
        }
    },
    "properties": {
        "Type": {
            "description": "Assembly-qualified name of the asset type.",
            "type": "string"
        },
        "Category": {
            "description": "Category of the asset, if any.",
            "type": "string",
            "enum": [ "NONE", "ITEM", "EFFECT", "OBJECT", "RESOURCE", "VEHICLE", "ANIMAL", "MYTHIC", "SKIN", "SPAWN", "NPC" ]
        },
        "DisplayName": {
            "description": "Display name of the type of asset.",
            "type": "string"
        },
        "Parent": {
            "description": "Assembly-qualified name of the parent asset type, or null for Asset.",
            "type": [ "string", "null" ]
        },
        "Docs": {
            "description": "Link to the Unturned modding docs when a page is available.",
            "type": [ "string", "null" ],
            "format": "uri"
        },
        "VanillaIdLimit": {
            "description": "The first ID that isn't reserved by vanilla. 0 if this doesn't apply.",
            "type": "number",
            "minimum": 0,
            "maximum": 65535
        },
        "RequireId": {
            "description": "If this type requires a non-zero unique ID.",
            "type": "boolean"
        },
        "Properties": {
            "description": "List of all properties that can be defined.",
            "type": "array",
            "items": {
                "$ref": "#/$defs/datProperty"
            }
        },
        "Localization": {
            "description": "List of all localization properties that can be defined.",
            "type": "array",
            "items": {
                "$ref": "#/$defs/datProperty"
            }
        },
        "BundleAssets": {
            "description": "List of all assets loaded from Unity bundles with an expected name.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "AssetName": {
                        "type": "string",
                        "description": "The name of the asset in Unity."
                    },
                    "SingleAssetNameOverride": {
                        "type": [ "string", "null" ],
                        "description": "If 'AssetNameIsRegex', the singular version of the asset name which would not be regex."
                    },
                    "AssetNameIsRegex": {
                        "type": "boolean",
                        "description": "If 'AssetName' is a regex expression to match properties."
                    },
                    "Docs": {
                        "description": "Link to the Unturned modding docs when a page is available.",
                        "type": [ "string", "null" ],
                        "format": "uri"
                    },
                    "AssetNameGroups": {
                        "type": [ "array", "null" ],
                        "description": "If 'AssetNameIsRegex', then this is a list of groups by name to match with other properties within the given regex group.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "RegexGroup": {
                                    "type": "number",
                                    "description": "The regex group (starting from 1) that acts as the identifier for this group."
                                },
                                "Name": {
                                    "type": "string",
                                    "description": "Unique name of this group (amongst the this asset type's hierarchy)."
                                }
                            }
                        }
                    },
                    "Description": {
                        "type": "string",
                        "description": "Description of what the prefab does."
                    },
                    "Deprecated": {
                        "type": "boolean",
                        "description": "If the prefab is no longer used or has been swapped for newer prefab features."
                    },
                    "Required": {
                        "type": [ "string", "boolean" ],
                        "description": "If the prefab is required to exist (or doesn't make sense to not exist)."
                    },
                    "Type": {
                        "type": "string",
                        "description": "The fully qualified type of unity asset to load."
                    },
                    "AnimationComponentFindArgument": {
                        "type": [ "string", "null" ],
                        "description": "The child GameObject that should have the Animation component attached." 
                    },
                    "Variable": {
                        "description": "Name of the variable in the C# class.",
                        "type": "string"
                    },
                    "Animations": {
                        "type": "array",
                        "description": "List of animations that can be available on the Animation component.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "Name": {
                                    "type": "string",
                                    "description": "The name of the animation in Unity."
                                },
                                "Required": {
                                    "type": [ "string", "boolean" ],
                                    "description": "If the animation is required."
                                },
                                "SingleNameOverride": {
                                    "type": [ "string", "null" ],
                                    "description": "If 'NameIsRegex', the singular version of the name which would not be regex."
                                },
                                "NameIsRegex": {
                                    "type": "boolean",
                                    "description": "If 'Name' is a regex expression to match properties."
                                },
                                "NameGroups": {
                                    "type": [ "array", "null" ],
                                    "description": "If 'NameIsRegex', then this is a list of groups by name to match with other properties within the given regex group.",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "RegexGroup": {
                                                "type": "number",
                                                "description": "The regex group (starting from 1) that acts as the identifier for this group."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Unique name of this group (amongst the this asset type's hierarchy)."
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "Types": {
            "description": "List of related custom types.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "Type": {
                        "description": "Fully qualified type name.",
                        "type": "string"
                    },
                    "DisplayName": {
                        "description": "Display name of the type.",
                        "type": "string"
                    },
                    "Docs": {
                        "description": "Link to the Unturned modding docs when a page is available.",
                        "type": [ "string", "null" ],
                        "format": "uri"
                    },
                    "Values": {
                        "description": "List of enum values.",
                        "type": "array",
                        "items": { 
                            "type": "object",
                            "properties": {
                                "Value": {
                                    "type": "string",
                                    "description": "The name of the enum field."
                                },
                                "Casing": {
                                    "type": "string",
                                    "description": "The proper-case version of 'Value'."
                                },
                                "RequiredBaseType": {
                                    "type": "string",
                                    "description": "The required type of this asset to use this value (also matches subtypes)."
                                },
                                "Description": {
                                    "type": "string",
                                    "description": "Description of what the enum value does."
                                }
                            },
                            "required": [ "Value" ]
                        }
                    },
                    "Properties": {
                        "description": "List of all properties that can be defined.",
                        "type": "array",
                        "items": {
                            "$ref": "#/$defs/datProperty"
                        }
                    }
                }
            }
        }
    },
    "required": [ "Type", "DisplayName", "Parent" ]
}